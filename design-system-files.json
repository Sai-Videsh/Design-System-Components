{
    "files": [
      {
        "path": "package.json",
        "content": {
          "name": "design-system",
          "version": "0.1.0",
          "private": true,
          "dependencies": {
            "@testing-library/jest-dom": "^5.16.5",
            "@testing-library/react": "^13.4.0",
            "@testing-library/user-event": "^13.5.0",
            "@types/jest": "^27.5.2",
            "@types/node": "^16.18.11",
            "@types/react": "^18.0.27",
            "@types/react-dom": "^18.0.10",
            "clsx": "^1.2.1",
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "react-scripts": "5.0.1",
            "tailwind-merge": "^1.8.1",
            "typescript": "^4.9.4",
            "uuid": "^9.0.0",
            "web-vitals": "^2.1.4"
          },
          "scripts": {
            "start": "react-scripts start",
            "build": "react-scripts build",
            "test": "react-scripts test",
            "eject": "react-scripts eject",
            "storybook": "start-storybook -p 6006 -s public",
            "build-storybook": "build-storybook -s public",
            "chromatic": "chromatic"
          },
          "eslintConfig": {
            "extends": [
              "react-app",
              "react-app/jest"
            ],
            "overrides": [
              {
                "files": [
                  "**/*.stories.*"
                ],
                "rules": {
                  "import/no-anonymous-default-export": "off"
                }
              }
            ]
          },
          "browserslist": {
            "production": [
              ">0.2%",
              "not dead",
              "not op_mini all"
            ],
            "development": [
              "last 1 chrome version",
              "last 1 firefox version",
              "last 1 safari version"
            ]
          },
          "devDependencies": {
            "@storybook/addon-a11y": "^6.5.16",
            "@storybook/addon-actions": "^6.5.16",
            "@storybook/addon-essentials": "^6.5.16",
            "@storybook/addon-interactions": "^6.5.16",
            "@storybook/addon-links": "^6.5.16",
            "@storybook/builder-webpack5": "^6.5.16",
            "@storybook/manager-webpack5": "^6.5.16",
            "@storybook/node-logger": "^6.5.16",
            "@storybook/preset-create-react-app": "^4.1.2",
            "@storybook/react": "^6.5.16",
            "@storybook/testing-library": "^0.0.13",
            "autoprefixer": "^10.4.13",
            "babel-plugin-named-exports-order": "^0.0.2",
            "chromatic": "^6.17.1",
            "postcss": "^8.4.21",
            "prop-types": "^15.8.1",
            "tailwindcss": "^3.2.4",
            "webpack": "^5.75.0"
          }
        }
      },
      {
        "path": "src/index.css",
        "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
      },
      {
        "path": "src/index.tsx",
        "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from './themes/ThemeContext';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"
      },
      {
        "path": "src/App.tsx",
        "content": "import React from 'react';\nimport { Heading } from './components/typography/Heading';\nimport { Paragraph } from './components/typography/Paragraph';\nimport { TextInput } from './components/data-entry/TextInput';\nimport { Checkbox } from './components/data-entry/Checkbox';\nimport { ToastProvider, useToast } from './components/feedback/toast/ToastContext';\nimport { ToastContainer } from './components/feedback/toast/ToastContainer';\nimport { useTheme } from './themes/ThemeContext';\n\nfunction App() {\n  const { mode, toggleTheme } = useTheme();\n  const { addToast } = useToast();\n\n  const showToast = (type: 'info' | 'success' | 'warning' | 'error') => {\n    addToast({\n      type,\n      title: type.charAt(0).toUpperCase() + type.slice(1),\n      message: `This is a ${type} message`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen p-8 bg-white dark:bg-gray-900 transition-colors\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <Heading level={1}>Design System</Heading>\n          <button\n            onClick={toggleTheme}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\"\n          >\n            {mode === 'light' ? 'Dark Mode' : 'Light Mode'}\n          </button>\n        </div>\n\n        <section className=\"mb-12\">\n          <Heading level={2} className=\"mb-4\">Typography</Heading>\n          <div className=\"space-y-4\">\n            <Heading level={1}>Heading 1</Heading>\n            <Heading level={2}>Heading 2</Heading>\n            <Heading level={3}>Heading 3</Heading>\n            <Heading level={4}>Heading 4</Heading>\n            <Heading level={5}>Heading 5</Heading>\n            <Heading level={6}>Heading 6</Heading>\n            <Paragraph>This is a paragraph with normal text.</Paragraph>\n            <Paragraph size=\"small\">This is a small paragraph.</Paragraph>\n          </div>\n        </section>\n\n        <section className=\"mb-12\">\n          <Heading level={2} className=\"mb-4\">Data Entry</Heading>\n          <div className=\"space-y-6\">\n            <TextInput\n              label=\"Email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              helperText=\"We'll never share your email with anyone else.\"\n            />\n            <TextInput\n              label=\"Password\"\n              placeholder=\"Enter your password\"\n              type=\"password\"\n              error={true}\n              errorMessage=\"Password must be at least 8 characters long\"\n            />\n            <Checkbox\n              label=\"Remember me\"\n              helperText=\"Save your login information for next time\"\n            />\n          </div>\n        </section>\n\n        <section className=\"mb-12\">\n          <Heading level={2} className=\"mb-4\">Feedback</Heading>\n          <div className=\"space-y-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              <button\n                onClick={() => showToast('info')}\n                className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\"\n              >\n                Show Info Toast\n              </button>\n              <button\n                onClick={() => showToast('success')}\n                className=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors\"\n              >\n                Show Success Toast\n              </button>\n              <button\n                onClick={() => showToast('warning')}\n                className=\"px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors\"\n              >\n                Show Warning Toast\n              </button>\n              <button\n                onClick={() => showToast('error')}\n                className=\"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors\"\n              >\n                Show Error Toast\n              </button>\n            </div>\n          </div>\n        </section>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nfunction AppWithProviders() {\n  return (\n    <ToastProvider>\n      <App />\n    </ToastProvider>\n  );\n}\n\nexport default AppWithProviders;\n"
      },
      {
        "path": "tailwind.config.js",
        "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      fontSize: {\n        'xs': '0.75rem',    // 12px\n        'sm': '0.875rem',   // 14px\n        'base': '1rem',     // 16px\n        'lg': '1.125rem',   // 18px\n        'xl': '1.25rem',    // 20px\n        '2xl': '1.5rem',    // 24px\n        '3xl': '1.875rem',  // 30px\n        '4xl': '2.25rem',   // 36px\n        '5xl': '3rem',      // 48px\n        '6xl': '3.75rem',   // 60px\n      },\n      fontWeight: {\n        'light': 300,\n        'normal': 400,\n        'medium': 500,\n        'semibold': 600,\n        'bold': 700,\n      },\n      lineHeight: {\n        'none': 1,\n        'tight': 1.25,\n        'snug': 1.375,\n        'normal': 1.5,\n        'relaxed': 1.625,\n        'loose': 2,\n      },\n      letterSpacing: {\n        'tighter': '-0.05em',\n        'tight': '-0.025em',\n        'normal': '0',\n        'wide': '0.025em',\n        'wider': '0.05em',\n        'widest': '0.1em',\n      },\n    },\n  },\n  plugins: [],\n}"
      },
      {
        "path": "postcss.config.js",
        "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
      },
      {
        "path": "src/tokens/colors.ts",
        "content": "export const lightTheme = {\n  background: {\n    primary: '#ffffff',\n    secondary: '#f5f5f5',\n  },\n  text: {\n    primary: '#1a1a1a',\n    secondary: '#4a4a4a',\n    disabled: '#9e9e9e',\n  },\n  border: {\n    primary: '#e0e0e0',\n    secondary: '#f0f0f0',\n    focus: '#3b82f6',\n  },\n  action: {\n    primary: '#3b82f6',\n    hover: '#2563eb',\n    disabled: '#9e9e9e',\n  },\n  feedback: {\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n    info: '#3b82f6',\n  },\n};\n\nexport const darkTheme = {\n  background: {\n    primary: '#1a1a1a',\n    secondary: '#2a2a2a',\n  },\n  text: {\n    primary: '#ffffff',\n    secondary: '#e0e0e0',\n    disabled: '#6e6e6e',\n  },\n  border: {\n    primary: '#3a3a3a',\n    secondary: '#4a4a4a',\n    focus: '#3b82f6',\n  },\n  action: {\n    primary: '#3b82f6',\n    hover: '#2563eb',\n    disabled: '#6e6e6e',\n  },\n  feedback: {\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n    info: '#3b82f6',\n  },\n};"
      },
      {
        "path": "src/tokens/typography.ts",
        "content": "export const fontSizes = {\n  xs: '0.75rem',    // 12px\n  sm: '0.875rem',   // 14px\n  base: '1rem',     // 16px\n  lg: '1.125rem',   // 18px\n  xl: '1.25rem',    // 20px\n  '2xl': '1.5rem',  // 24px\n  '3xl': '1.875rem', // 30px\n  '4xl': '2.25rem',  // 36px\n  '5xl': '3rem',     // 48px\n  '6xl': '3.75rem',  // 60px\n};\n\nexport const fontWeights = {\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  bold: 700,\n};\n\nexport const lineHeights = {\n  none: 1,\n  tight: 1.25,\n  snug: 1.375,\n  normal: 1.5,\n  relaxed: 1.625,\n  loose: 2,\n};\n\nexport const letterSpacings = {\n  tighter: '-0.05em',\n  tight: '-0.025em',\n  normal: '0',\n  wide: '0.025em',\n  wider: '0.05em',\n  widest: '0.1em',\n};"
      },
      {
        "path": "src/themes/ThemeContext.tsx",
        "content": "import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { lightTheme, darkTheme } from '../tokens/colors';\n\ntype ThemeMode = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: typeof lightTheme;\n  mode: ThemeMode;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{children: React.ReactNode, initialTheme?: ThemeMode}> = ({ \n  children, \n  initialTheme = 'light' \n}) => {\n  const [mode, setMode] = useState<ThemeMode>(initialTheme);\n  const theme = mode === 'light' ? lightTheme : darkTheme;\n\n  const toggleTheme = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n\n  useEffect(() => {\n    // Apply theme to document\n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(mode);\n  }, [mode]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, mode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};"
      },
      {
        "path": "src/utils/cn.ts",
        "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
      },
      {
        "path": "src/components/typography/Typography.tsx",
        "content": "import React from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface TypographyProps {\n  variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'body1' | 'body2' | 'caption' | 'label' | 'helper';\n  weight?: 'light' | 'normal' | 'medium' | 'semibold' | 'bold';\n  align?: 'left' | 'center' | 'right';\n  color?: 'primary' | 'secondary' | 'disabled';\n  className?: string;\n  children: React.ReactNode;\n  as?: React.ElementType;\n}\n\nexport const Typography: React.FC<TypographyProps> = ({\n  variant = 'body1',\n  weight = 'normal',\n  align = 'left',\n  color = 'primary',\n  className,\n  children,\n  as,\n  ...props\n}) => {\n  const variantClasses = {\n    h1: 'text-5xl font-bold leading-tight',\n    h2: 'text-4xl font-bold leading-tight',\n    h3: 'text-3xl font-bold leading-tight',\n    h4: 'text-2xl font-semibold leading-snug',\n    h5: 'text-xl font-semibold leading-snug',\n    h6: 'text-lg font-semibold leading-snug',\n    body1: 'text-base font-normal leading-normal',\n    body2: 'text-sm font-normal leading-normal',\n    caption: 'text-xs font-normal leading-normal',\n    label: 'text-sm font-medium leading-tight',\n    helper: 'text-xs font-normal leading-normal',\n  };\n\n  const weightClasses = {\n    light: 'font-light',\n    normal: 'font-normal',\n    medium: 'font-medium',\n    semibold: 'font-semibold',\n    bold: 'font-bold',\n  };\n\n  const alignClasses = {\n    left: 'text-left',\n    center: 'text-center',\n    right: 'text-right',\n  };\n\n  const colorClasses = {\n    primary: 'text-gray-900 dark:text-white',\n    secondary: 'text-gray-600 dark:text-gray-300',\n    disabled: 'text-gray-400 dark:text-gray-500',\n  };\n\n  const Component = as || (variant === 'h1' ? 'h1' : variant === 'h2' ? 'h2' : variant === 'h3' ? 'h3' : variant === 'h4' ? 'h4' : variant === 'h5' ? 'h5' : variant === 'h6' ? 'h6' : variant === 'label' ? 'label' : 'p');\n\n  return (\n    <Component\n      className={cn(\n        variantClasses[variant],\n        weightClasses[weight],\n        alignClasses[align],\n        colorClasses[color],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};"
      },
      {
        "path": "src/components/typography/Heading.tsx",
        "content": "import React from 'react';\nimport { Typography, TypographyProps } from './Typography';\n\nexport interface HeadingProps extends Omit<TypographyProps, 'variant'> {\n  level: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: React.FC<HeadingProps> = ({ level, ...props }) => {\n  const variant = `h${level}` as 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  return <Typography variant={variant} {...props} />;\n};"
      },
      {
        "path": "src/components/typography/Paragraph.tsx",
        "content": "import React from 'react';\nimport { Typography, TypographyProps } from './Typography';\n\nexport interface ParagraphProps extends Omit<TypographyProps, 'variant'> {\n  size?: 'small' | 'medium';\n}\n\nexport const Paragraph: React.FC<ParagraphProps> = ({ size = 'medium', ...props }) => {\n  const variant = size === 'small' ? 'body2' : 'body1';\n  return <Typography variant={variant} {...props} />;\n};"
      },
      {
        "path": "src/components/typography/Label.tsx",
        "content": "import React from 'react';\nimport { Typography, TypographyProps } from './Typography';\n\nexport const Label: React.FC<Omit<TypographyProps, 'variant'>> = (props) => {\n  return <Typography variant=\"label\" {...props} />;\n};"
      },
      {
        "path": "src/components/typography/Caption.tsx",
        "content": "import React from 'react';\nimport { Typography, TypographyProps } from './Typography';\n\nexport const Caption: React.FC<Omit<TypographyProps, 'variant'>> = (props) => {\n  return <Typography variant=\"caption\" {...props} />;\n};"
      },
      {
        "path": "src/components/typography/HelperText.tsx",
        "content": "import React from 'react';\nimport { Typography, TypographyProps } from './Typography';\n\nexport const HelperText: React.FC<Omit<TypographyProps, 'variant'>> = (props) => {\n  return <Typography variant=\"helper\" color=\"secondary\" {...props} />;\n};"
      },
      {
        "path": "src/components/typography/index.ts",
        "content": "export * from './Typography';\nexport * from './Heading';\nexport * from './Paragraph';\nexport * from './Label';\nexport * from './Caption';\nexport * from './HelperText';"
      },
      {
        "path": "src/components/data-entry/TextInput.tsx",
        "content": "import React, { forwardRef } from 'react';\nimport { cn } from '../../utils/cn';\nimport { Label } from '../typography/Label';\nimport { HelperText } from '../typography/HelperText';\n\nexport interface TextInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  helperText?: string;\n  error?: boolean;\n  errorMessage?: string;\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  (\n    {\n      label,\n      helperText,\n      error = false,\n      errorMessage,\n      startIcon,\n      endIcon,\n      size = 'md',\n      fullWidth = false,\n      className,\n      id,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const inputId = id || `input-${Math.random().toString(36).substring(2, 9)}`;\n    \n    const sizeClasses = {\n      sm: 'h-8 text-sm px-2',\n      md: 'h-10 text-base px-3',\n      lg: 'h-12 text-lg px-4',\n    };\n    \n    return (\n      <div className={cn('flex flex-col gap-1.5', fullWidth ? 'w-full' : 'w-auto')}>\n        {label && (\n          <Label htmlFor={inputId} className={cn(disabled && 'text-gray-400')}>\n            {label}\n          </Label>\n        )}\n        <div className=\"relative flex items-center\">\n          {startIcon && (\n            <div className=\"absolute left-3 flex items-center pointer-events-none\">\n              {startIcon}\n            </div>\n          )}\n          <input\n            ref={ref}\n            id={inputId}\n            disabled={disabled}\n            className={cn(\n              'border rounded-md focus:outline-none focus:ring-2 transition-colors',\n              sizeClasses[size],\n              startIcon && 'pl-10',\n              endIcon && 'pr-10',\n              error\n                ? 'border-red-500 focus:border-red-500 focus:ring-red-200'\n                : 'border-gray-300 focus:border-blue-500 focus:ring-blue-200',\n              disabled && 'bg-gray-100 text-gray-400 cursor-not-allowed',\n              fullWidth ? 'w-full' : 'w-auto',\n              className\n            )}\n            aria-invalid={error}\n            aria-describedby={error ? `${inputId}-error` : helperText ? `${inputId}-helper` : undefined}\n            {...props}\n          />\n          {endIcon && (\n            <div className=\"absolute right-3 flex items-center pointer-events-none\">\n              {endIcon}\n            </div>\n          )}\n        </div>\n        {(error && errorMessage) && (\n          <HelperText id={`${inputId}-error`} className=\"text-red-500\">\n            {errorMessage}\n          </HelperText>\n        )}\n        {(!error && helperText) && (\n          <HelperText id={`${inputId}-helper`}>\n            {helperText}\n          </HelperText>\n        )}\n      </div>\n    );\n  }\n);\n\nTextInput.displayName = 'TextInput';"
      },
      {
        "path": "src/components/data-entry/Checkbox.tsx",
        "content": "import React, { forwardRef } from 'react';\nimport { cn } from '../../utils/cn';\nimport { HelperText } from '../typography/HelperText';\n\nexport interface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  label?: string;\n  helperText?: string;\n  error?: boolean;\n  errorMessage?: string;\n  size?: 'sm' | 'md' | 'lg';\n  indeterminate?: boolean;\n}\n\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      label,\n      helperText,\n      error = false,\n      errorMessage,\n      className,\n      size = 'md',\n      indeterminate = false,\n      id,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const inputId = id || `checkbox-${Math.random().toString(36).substring(2, 9)}`;\n    \n    const inputRef = React.useRef<HTMLInputElement>(null);\n    \n    React.useImperativeHandle(ref, () => inputRef.current as HTMLInputElement);\n    \n    React.useEffect(() => {\n      if (inputRef.current) {\n        inputRef.current.indeterminate = indeterminate;\n      }\n    }, [indeterminate]);\n    \n    const sizeClasses = {\n      sm: 'w-3.5 h-3.5',\n      md: 'w-4 h-4',\n      lg: 'w-5 h-5',\n    };\n    \n    const labelSizeClasses = {\n      sm: 'text-sm',\n      md: 'text-base',\n      lg: 'text-lg',\n    };\n    \n    return (\n      <div className=\"flex flex-col gap-1\">\n        <div className=\"flex items-center gap-2\">\n          <input\n            ref={inputRef}\n            type=\"checkbox\"\n            id={inputId}\n            disabled={disabled}\n            className={cn(\n              'form-checkbox rounded border transition-colors focus:outline-none focus:ring-2 focus:ring-offset-0',\n              sizeClasses[size],\n              error\n                ? 'border-red-500 text-red-500 focus:border-red-500 focus:ring-red-200'\n                : 'border-gray-300 text-blue-500 focus:border-blue-500 focus:ring-blue-200',\n              disabled && 'bg-gray-100 text-gray-400 cursor-not-allowed',\n              className\n            )}\n            aria-invalid={error}\n            aria-describedby={error ? `${inputId}-error` : helperText ? `${inputId}-helper` : undefined}\n            {...props}\n          />\n          {label && (\n            <label\n              htmlFor={inputId}\n              className={cn(\n                labelSizeClasses[size],\n                disabled && 'text-gray-400 cursor-not-allowed'\n              )}\n            >\n              {label}\n            </label>\n          )}\n        </div>\n        {(error && errorMessage) && (\n          <HelperText id={`${inputId}-error`} className=\"text-red-500\">\n            {errorMessage}\n          </HelperText>\n        )}\n        {(!error && helperText) && (\n          <HelperText id={`${inputId}-helper`}>\n            {helperText}\n          </HelperText>\n        )}\n      </div>\n    );\n  }\n);\n\nCheckbox.displayName = 'Checkbox';"
      },
      {
        "path": "src/components/feedback/toast/ToastContext.tsx",
        "content": "import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type ToastType = 'info' | 'success' | 'warning' | 'error';\n\nexport interface ToastProps {\n  id: string;\n  type: ToastType;\n  title?: string;\n  message: string;\n  duration?: number;\n  onClose?: () => void;\n}\n\ninterface ToastContextType {\n  toasts: ToastProps[];\n  addToast: (toast: Omit<ToastProps, 'id'>) => string;\n  removeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const ToastProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastProps[]>([]);\n\n  const addToast = useCallback((toast: Omit<ToastProps, 'id'>) => {\n    const id = uuidv4();\n    const newToast: ToastProps = {\n      ...toast,\n      id,\n      duration: toast.duration || 5000,\n    };\n    \n    setToasts((prevToasts) => [...prevToasts, newToast]);\n    \n    if (newToast.duration !== Infinity) {\n      setTimeout(() => {\n        removeToast(id);\n        toast.onClose?.();\n      }, newToast.duration);\n    }\n    \n    return id;\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};"
      },
      {
        "path": "src/components/feedback/toast/Toast.tsx",
        "content": "import React, { useEffect, useState } from 'react';\nimport { cn } from '../../../utils/cn';\nimport { ToastProps, ToastType } from './ToastContext';\n\ninterface ToastComponentProps extends ToastProps {\n  onRemove: (id: string) => void;\n}\n\nexport const Toast: React.FC<ToastComponentProps> = ({\n  id,\n  type,\n  title,\n  message,\n  onRemove,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  \n  useEffect(() => {\n    // Trigger enter animation\n    const enterTimeout = setTimeout(() => {\n      setIsVisible(true);\n    }, 10);\n    \n    return () => {\n      clearTimeout(enterTimeout);\n    };\n  }, []);\n  \n  const handleClose = () => {\n    setIsVisible(false);\n    // Wait for exit animation to complete\n    setTimeout(() => {\n      onRemove(id);\n    }, 300);\n  };\n  \n  const typeClasses: Record<ToastType, string> = {\n    info: 'bg-blue-50 border-blue-200 text-blue-800',\n    success: 'bg-green-50 border-green-200 text-green-800',\n    warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',\n    error: 'bg-red-50 border-red-200 text-red-800',\n  };\n  \n  const iconByType: Record<ToastType, React.ReactNode> = {\n    info: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n      </svg>\n    ),\n    success: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n      </svg>\n    ),\n    warning: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-yellow-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n      </svg>\n    ),\n    error: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n      </svg>\n    ),\n  };\n  \n  return (\n    <div\n      role=\"alert\"\n      aria-live=\"assertive\"\n      className={cn(\n        'transform transition-all duration-300 ease-in-out',\n        isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0',\n        'max-w-sm w-full shadow-lg rounded-lg pointer-events-auto overflow-hidden'\n      )}\n    >\n      <div className={cn('p-4 border-l-4', typeClasses[type])}>\n        <div className=\"flex items-start\">\n          <div className=\"flex-shrink-0\">\n            {iconByType[type]}\n          </div>\n          <div className=\"ml-3 w-0 flex-1\">\n            {title && (\n              <p className=\"text-sm font-medium\">\n                {title}\n              </p>\n            )}\n            <p className={cn('text-sm', title ? 'mt-1' : '')}>\n              {message}\n            </p>\n          </div>\n          <div className=\"ml-4 flex-shrink-0 flex\">\n            <button\n              type=\"button\"\n              className=\"bg-transparent rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              onClick={handleClose}\n            >\n              <span className=\"sr-only\">Close</span>\n              <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};"
      },
      {
        "path": "src/components/feedback/toast/ToastContainer.tsx",
        "content": "import React from 'react';\nimport { Toast } from './Toast';\nimport { useToast } from './ToastContext';\n\nexport const ToastContainer: React.FC = () => {\n  const { toasts, removeToast } = useToast();\n  \n  return (\n    <div\n      aria-live=\"assertive\"\n      className=\"fixed inset-0 flex flex-col items-end px-4 py-6 pointer-events-none sm:p-6 z-50 gap-3\"\n    >\n      {toasts.map((toast) => (\n        <Toast\n          key={toast.id}\n          {...toast}\n          onRemove={removeToast}\n        />\n      ))}\n    </div>\n  );\n};"
      },
      {
        "path": "src/components/feedback/toast/index.ts",
        "content": "export * from './Toast';\nexport * from './ToastContainer';\nexport * from './ToastContext';"
      },
      {
        "path": "src/components/feedback/modal/Modal.tsx",
        "content": "import React, { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { cn } from '../../../utils/cn';\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  closeOnEsc?: boolean;\n  closeOnOverlayClick?: boolean;\n  className?: string;\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md',\n  closeOnEsc = true,\n  closeOnOverlayClick = true,\n  className,\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (closeOnEsc && event.key === 'Escape') {\n        onClose();\n      }\n    };\n    \n    if (isOpen) {\n      document.addEventListener('keydown', handleEsc);\n      document.body.style.overflow = 'hidden';\n    }\n    \n    return () => {\n      document.removeEventListener('keydown', handleEsc);\n      document.body.style.overflow = '';\n    };\n  }, [isOpen, onClose, closeOnEsc]);\n  \n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      modalRef.current.focus();\n    }\n  }, [isOpen]);\n  \n  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (closeOnOverlayClick && e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n  \n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl',\n  };\n  \n  if (!isOpen) return null;\n  \n  return createPortal(\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50 transition-opacity\"\n      onClick={handleOverlayClick}\n      aria-modal=\"true\"\n      role=\"dialog\"\n      aria-labelledby={title ? 'modal-title' : undefined}\n    >\n      <div\n        ref={modalRef}\n        className={cn(\n          'bg-white rounded-lg shadow-xl transform transition-all w-full',\n          sizeClasses[size],\n          className\n        )}\n        tabIndex={-1}\n      >\n        {title && (\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 id=\"modal-title\" className=\"text-lg font-medium text-gray-900\">\n              {title}\n            </h2>\n          </div>\n        )}\n        <div className=\"p-6\">{children}</div>\n        <button\n          type=\"button\"\n          className=\"absolute top-3 right-3 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          onClick={onClose}\n          aria-label=\"Close\"\n        >\n          <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n    </div>,\n    document.body\n  );\n};"
      },
      {
        "path": "src/components/feedback/modal/ModalFooter.tsx",
        "content": "import React from 'react';\nimport { cn } from '../../../utils/cn';\n\nexport interface ModalFooterProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const ModalFooter: React.FC<ModalFooterProps> = ({ children, className }) => {\n  return (\n    <div className={cn('px-6 py-4 border-t border-gray-200 flex justify-end gap-2', className)}>\n      {children}\n    </div>\n  );\n};"
      },
      {
        "path": "src/components/feedback/modal/index.ts",
        "content": "export * from './Modal';\nexport * from './ModalFooter';"
      },
      {
        "path": "src/components/data-entry/Button.tsx",
        "content": "import React, { forwardRef } from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  isLoading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      variant = 'primary',\n      size = 'md',\n      fullWidth = false,\n      isLoading = false,\n      leftIcon,\n      rightIcon,\n      className,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const variantClasses = {\n      primary: 'bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-200',\n      secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-200',\n      outline: 'bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-200',\n      ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-200',\n      danger: 'bg-red-500 text-white hover:bg-red-600 focus:ring-red-200',\n    };\n\n    const sizeClasses = {\n      sm: 'h-8 text-sm px-3',\n      md: 'h-10 text-base px-4',\n      lg: 'h-12 text-lg px-6',\n    };\n\n    return (\n      <button\n        ref={ref}\n        disabled={disabled || isLoading}\n        className={cn(\n          'inline-flex items-center justify-center rounded-md font-medium transition-colors',\n          'focus:outline-none focus:ring-2 focus:ring-offset-2',\n          variantClasses[variant],\n          sizeClasses[size],\n          fullWidth ? 'w-full' : '',\n          (disabled || isLoading) && 'opacity-50 cursor-not-allowed',\n          className\n        )}\n        {...props}\n      >\n        {isLoading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            ></path>\n          </svg>\n        )}\n        {!isLoading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n        {children}\n        {!isLoading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';"
      },
      {
        "path": ".storybook/main.js",
        "content": "module.exports = {\n  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/preset-create-react-app',\n  ],\n  framework: '@storybook/react',\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n};"
      },
      {
        "path": ".storybook/preview.js",
        "content": "import '../src/index.css';\nimport { themes } from '@storybook/theming';\nimport { ThemeDecorator } from './ThemeDecorator';\n\nexport const globalTypes = {\n  theme: {\n    name: 'Theme',\n    description: 'Global theme for components',\n    defaultValue: 'light',\n    toolbar: {\n      icon: 'circlehollow',\n      items: [\n        { value: 'light', title: 'Light' },\n        { value: 'dark', title: 'Dark' },\n      ],\n    },\n  },\n};\n\nexport const decorators = [ThemeDecorator];\n\nexport const parameters = {\n  actions: { argTypesRegex: \"^on[A-Z].*\" },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  docs: {\n    theme: themes.light,\n  },\n  options: {\n    storySort: {\n      order: [\n        'Design System',\n        ['Introduction', 'Typography', 'Data Entry', 'Feedback'],\n      ],\n    },\n  },\n};"
      },
      {
        "path": ".storybook/ThemeDecorator.jsx",
        "content": "import React from 'react';\nimport { useGlobals } from '@storybook/client-api';\nimport { ThemeProvider } from '../src/themes/ThemeContext';\n\nexport const ThemeDecorator = (Story) => {\n  const [{ theme }] = useGlobals();\n  const currentTheme = theme || 'light';\n  \n  return (\n    <ThemeProvider initialTheme={currentTheme}>\n      <div className={currentTheme}>\n        <div className=\"p-4 transition-colors duration-200\" style={{ minHeight: '100vh' }}>\n          <Story />\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};"
      },
      {
        "path": "src/stories/Introduction.stories.mdx",
        "content": "import { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Design System/Introduction\" />\n\n# Design System\n\nThis design system provides a set of reusable components for building consistent user interfaces.\n\n## Core Principles\n\n- **Consistency**: Unified visual language across all products\n- **Accessibility**: WCAG 2.1 AA compliant components\n- **Flexibility**: Customizable components that adapt to different contexts\n- **Performance**: Optimized for speed and efficiency\n\n## Component Categories\n\n- **Typography**: Text components for headings, paragraphs, and more\n- **Data Entry**: Form components for user input\n- **Feedback**: Components for providing feedback to users\n\n## Getting Started\n\n```jsx\nimport { Typography, TextInput, Toast } from 'design-system';\n\nfunction App() {\n  return (\n    <div>\n      <Typography variant=\"h1\">Hello World</Typography>\n      <TextInput label=\"Name\" placeholder=\"Enter your name\" />\n    </div>\n  );\n}\n```\n\n## Accessibility\n\nAll components are designed with accessibility in mind:\n\n- Proper ARIA attributes\n- Keyboard navigation support\n- Color contrast compliance\n- Screen reader compatibility"
      },
      {
        "path": "src/components/typography/Typography.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Typography } from './Typography';\n\nconst meta: Meta<typeof Typography> = {\n  title: 'Design System/Typography/Typography',\n  component: Typography,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'body1', 'body2', 'caption', 'label', 'helper'],\n    },\n    weight: {\n      control: 'select',\n      options: ['light', 'normal', 'medium', 'semibold', 'bold'],\n    },\n    align: {\n      control: 'radio',\n      options: ['left', 'center', 'right'],\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'disabled'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Typography>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Typography Example',\n    variant: 'body1',\n    weight: 'normal',\n    align: 'left',\n    color: 'primary',\n  },\n};\n\nexport const AllVariants: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <Typography variant=\"h1\">Heading 1</Typography>\n      <Typography variant=\"h2\">Heading 2</Typography>\n      <Typography variant=\"h3\">Heading 3</Typography>\n      <Typography variant=\"h4\">Heading 4</Typography>\n      <Typography variant=\"h5\">Heading 5</Typography>\n      <Typography variant=\"h6\">Heading 6</Typography>\n      <Typography variant=\"body1\">Body 1 - Main text paragraph</Typography>\n      <Typography variant=\"body2\">Body 2 - Secondary text paragraph</Typography>\n      <Typography variant=\"caption\">Caption - Small text for captions</Typography>\n      <Typography variant=\"label\">Label - Text for form labels</Typography>\n      <Typography variant=\"helper\">Helper - Text for helper messages</Typography>\n    </div>\n  ),\n};\n\nexport const WeightVariants: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <Typography weight=\"light\">Light weight text</Typography>\n      <Typography weight=\"normal\">Normal weight text</Typography>\n      <Typography weight=\"medium\">Medium weight text</Typography>\n      <Typography weight=\"semibold\">Semibold weight text</Typography>\n      <Typography weight=\"bold\">Bold weight text</Typography>\n    </div>\n  ),\n};\n\nexport const AlignmentVariants: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <Typography align=\"left\">Left aligned text</Typography>\n      <Typography align=\"center\">Center aligned text</Typography>\n      <Typography align=\"right\">Right aligned text</Typography>\n    </div>\n  ),\n};\n\nexport const ColorVariants: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <Typography color=\"primary\">Primary color text</Typography>\n      <Typography color=\"secondary\">Secondary color text</Typography>\n      <Typography color=\"disabled\">Disabled color text</Typography>\n    </div>\n  ),\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses semantic HTML elements based on the variant\n- Ensures proper color contrast for all text variants\n- Supports responsive text sizing\n- Maintains readability with appropriate line heights\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-8\">\n      <div className=\"p-4 bg-white\">\n        <Typography color=\"primary\">Text on light background</Typography>\n        <Typography color=\"secondary\">Secondary text on light background</Typography>\n      </div>\n      <div className=\"p-4 bg-gray-900\">\n        <Typography color=\"primary\">Text on dark background</Typography>\n        <Typography color=\"secondary\">Secondary text on dark background</Typography>\n      </div>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/typography/Heading.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Heading } from './Heading';\n\nconst meta: Meta<typeof Heading> = {\n  title: 'Design System/Typography/Heading',\n  component: Heading,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    level: {\n      control: { type: 'select' },\n      options: [1, 2, 3, 4, 5, 6],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Heading>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Heading Example',\n    level: 1,\n  },\n};\n\nexport const AllLevels: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <Heading level={1}>Heading Level 1</Heading>\n      <Heading level={2}>Heading Level 2</Heading>\n      <Heading level={3}>Heading Level 3</Heading>\n      <Heading level={4}>Heading Level 4</Heading>\n      <Heading level={5}>Heading Level 5</Heading>\n      <Heading level={6}>Heading Level 6</Heading>\n    </div>\n  ),\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: '\\n### Accessibility Considerations\\n\\n- Uses proper heading hierarchy (h1-h6)\\n- Maintains appropriate font sizes for readability\\n- Ensures proper color contrast\\n- Uses semantic HTML elements\\n        ',\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <Heading level={1}>Primary Heading</Heading>\n      <Heading level={2}>Secondary Heading</Heading>\n      <Heading level={3}>Tertiary Heading</Heading>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/typography/Paragraph.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Paragraph } from './Paragraph';\n\nconst meta: Meta<typeof Paragraph> = {\n  title: 'Design System/Typography/Paragraph',\n  component: Paragraph,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['small', 'medium'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Paragraph>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Paragraph Example',\n    size: 'medium',\n  },\n};\n\nexport const Small: Story = {\n  args: {\n    children: 'Small Paragraph',\n    size: 'small',\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses semantic HTML elements\n- Supports responsive text sizing\n- Maintains readability with appropriate line heights\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <Paragraph size=\"small\">Small Paragraph</Paragraph>\n      <Paragraph size=\"medium\">Medium Paragraph</Paragraph>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/typography/Label.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Label } from './Label';\n\nconst meta: Meta<typeof Label> = {\n  title: 'Design System/Typography/Label',\n  component: Label,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    children: {\n      control: 'text',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Label>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Label Example',\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses semantic HTML element\n- Supports text sizing\n- Maintains readability with appropriate line height\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <Label>Label Example</Label>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/typography/Caption.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Caption } from './Caption';\n\nconst meta: Meta<typeof Caption> = {\n  title: 'Design System/Typography/Caption',\n  component: Caption,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    children: {\n      control: 'text',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Caption>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Caption Example',\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses semantic HTML element\n- Supports text sizing\n- Maintains readability with appropriate line height\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <Caption>Caption Example</Caption>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/typography/HelperText.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { HelperText } from './HelperText';\n\nconst meta: Meta<typeof HelperText> = {\n  title: 'Design System/Typography/HelperText',\n  component: HelperText,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof HelperText>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Helper Text Example',\n    color: 'primary',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    children: 'Secondary Helper Text Example',\n    color: 'secondary',\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses semantic HTML element\n- Supports text sizing\n- Maintains readability with appropriate line height\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <HelperText>Helper Text Example</HelperText>\n      <HelperText color=\"secondary\">Secondary Helper Text Example</HelperText>\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/data-entry/TextInput.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { TextInput } from './TextInput';\n\nconst meta: Meta<typeof TextInput> = {\n  title: 'Design System/Data Entry/TextInput',\n  component: TextInput,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n    },\n    type: {\n      control: 'select',\n      options: ['text', 'password', 'email', 'number', 'tel', 'url'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    error: {\n      control: 'boolean',\n    },\n    fullWidth: {\n      control: 'boolean',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TextInput>;\n\nexport const Default: Story = {\n  args: {\n    label: 'Email',\n    placeholder: 'Enter your email',\n    type: 'email',\n  },\n};\n\nexport const WithHelperText: Story = {\n  args: {\n    label: 'Password',\n    placeholder: 'Enter your password',\n    type: 'password',\n    helperText: 'Password must be at least 8 characters',\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    label: 'Email',\n    placeholder: 'Enter your email',\n    type: 'email',\n    error: true,\n    errorMessage: 'Please enter a valid email address',\n    value: 'invalid-email',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    label: 'Username',\n    placeholder: 'Enter your username',\n    disabled: true,\n    value: 'johndoe',\n  },\n};\n\nexport const WithIcons: Story = {\n  args: {\n    label: 'Search',\n    placeholder: 'Search...',\n    startIcon: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" /></svg>,\n    endIcon: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" /></svg>,\n  },\n};\n\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <TextInput label=\"Small\" placeholder=\"Small input\" size=\"sm\" />\n      <TextInput label=\"Medium\" placeholder=\"Medium input\" size=\"md\" />\n      <TextInput label=\"Large\" placeholder=\"Large input\" size=\"lg\" />\n    </div>\n  ),\n};\n\nexport const FullWidth: Story = {\n  args: {\n    label: 'Full Width',\n    placeholder: 'This input takes up the full width',\n    fullWidth: true,\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses proper labeling with \\`<label>\\` elements\n- Includes ARIA attributes for validation states\n- Supports keyboard navigation\n- Error messages are linked to inputs with aria-describedby\n- Color contrast meets WCAG 2.1 AA standards\n\n### Keyboard Support\n\n| Key | Function |\n| --- | --- |\n| Tab | Moves focus to the input |\n| Shift+Tab | Moves focus to the previous focusable element |\n| Enter | Submits the form if inside a form element |\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <TextInput\n        label=\"Email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        helperText=\"We'll never share your email with anyone else.\"\n      />\n      <TextInput\n        label=\"Password\"\n        placeholder=\"Enter your password\"\n        type=\"password\"\n        error={true}\n        errorMessage=\"Password must be at least 8 characters long\"\n      />\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/data-entry/Checkbox.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Checkbox } from './Checkbox';\n\nconst meta: Meta<typeof Checkbox> = {\n  title: 'Design System/Data Entry/Checkbox',\n  component: Checkbox,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    error: {\n      control: 'boolean',\n    },\n    indeterminate: {\n      control: 'boolean',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Checkbox>;\n\nexport const Default: Story = {\n  args: {\n    label: 'Accept terms and conditions',\n  },\n};\n\nexport const WithHelperText: Story = {\n  args: {\n    label: 'Subscribe to newsletter',\n    helperText: 'You can unsubscribe at any time',\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    label: 'Accept terms and conditions',\n    error: true,\n    errorMessage: 'You must accept the terms and conditions',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    label: 'Disabled option',\n    disabled: true,\n  },\n};\n\nexport const Indeterminate: Story = {\n  args: {\n    label: 'Select all items',\n    indeterminate: true,\n  },\n};\n\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Checkbox label=\"Small checkbox\" size=\"sm\" />\n      <Checkbox label=\"Medium checkbox\" size=\"md\" />\n      <Checkbox label=\"Large checkbox\" size=\"lg\" />\n    </div>\n  ),\n};\n\nexport const Controlled: Story = {\n  render: () => {\n    const [checked, setChecked] = React.useState(false);\n    return (\n      <Checkbox\n        label={`Checkbox is ${checked ? 'checked' : 'unchecked'}`}\n        checked={checked}\n        onChange={(e) => setChecked(e.target.checked)}\n      />\n    );\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses native HTML checkbox for maximum compatibility\n- Properly associates labels with inputs\n- Supports keyboard navigation\n- Includes ARIA attributes for states (checked, indeterminate, disabled)\n- Error messages are linked with aria-describedby\n\n### Keyboard Support\n\n| Key | Function |\n| --- | --- |\n| Tab | Moves focus to the checkbox |\n| Space | Toggles the checkbox state |\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"space-y-4\">\n      <Checkbox label=\"Standard checkbox\" />\n      <Checkbox label=\"Checkbox with error\" error={true} errorMessage=\"This field is required\" />\n      <Checkbox label=\"Indeterminate checkbox\" indeterminate={true} />\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/feedback/toast/Toast.stories.tsx",
        "content": "import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Toast } from './Toast';\nimport { ToastProvider, useToast } from './ToastContext';\nimport { ToastContainer } from './ToastContainer';\nimport { Button } from '../../data-entry/Button';\n\nconst meta: Meta<typeof Toast> = {\n  title: 'Design System/Feedback/Toast',\n  component: Toast,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  decorators: [\n    (Story) => (\n      <ToastProvider>\n        <Story />\n      </ToastProvider>\n    ),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Toast>;\n\nexport const Default: Story = {\n  args: {\n    id: '1',\n    type: 'info',\n    message: 'This is an informational message',\n    onRemove: () => {},\n  },\n};\n\nexport const WithTitle: Story = {\n  args: {\n    id: '2',\n    type: 'success',\n    title: 'Success',\n    message: 'Your changes have been saved successfully',\n    onRemove: () => {},\n  },\n};\n\nexport const Types: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Toast\n        id=\"info\"\n        type=\"info\"\n        title=\"Information\"\n        message=\"This is an informational message\"\n        onRemove={() => {}}\n      />\n      <Toast\n        id=\"success\"\n        type=\"success\"\n        title=\"Success\"\n        message=\"Operation completed successfully\"\n        onRemove={() => {}}\n      />\n      <Toast\n        id=\"warning\"\n        type=\"warning\"\n        title=\"Warning\"\n        message=\"This action might have consequences\"\n        onRemove={() => {}}\n      />\n      <Toast\n        id=\"error\"\n        type=\"error\"\n        title=\"Error\"\n        message=\"An error occurred while processing your request\"\n        onRemove={() => {}}\n      />\n    </div>\n  ),\n};\n\n// Interactive example\nconst ToastDemo = () => {\n  const { addToast } = useToast();\n  \n  const showToast = (type: 'info' | 'success' | 'warning' | 'error') => {\n    addToast({\n      type,\n      title: type.charAt(0).toUpperCase() + type.slice(1),\n      message: `This is a ${type} message`,\n    });\n  };\n  \n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-2\">\n        <Button onClick={() => showToast('info')}>Show Info</Button>\n        <Button onClick={() => showToast('success')}>Show Success</Button>\n        <Button onClick={() => showToast('warning')}>Show Warning</Button>\n        <Button onClick={() => showToast('error')}>Show Error</Button>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport const Interactive: Story = {\n  render: () => <ToastDemo />,\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses role=\"alert\" for screen reader announcement\n- Uses aria-live=\"assertive\" for immediate announcement\n- Includes close button with proper labeling\n- Provides visual distinction between different toast types\n- Animations respect reduced motion preferences\n\n### Keyboard Support\n\n| Key | Function |\n| --- | --- |\n| Tab | Focuses the close button |\n| Enter/Space | Activates the close button when focused |\n| Escape | Closes the toast (when implemented) |\n        `,\n      },\n    },\n  },\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Toast\n        id=\"accessibility-example\"\n        type=\"info\"\n        title=\"Accessibility Example\"\n        message=\"This toast is designed with accessibility in mind\"\n        onRemove={() => {}}\n      />\n    </div>\n  ),\n};"
      },
      {
        "path": "src/components/feedback/modal/Modal.stories.tsx",
        "content": "import React, { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Modal } from './Modal';\nimport { ModalFooter } from './ModalFooter';\nimport { Button } from '../../data-entry/Button';\n\nconst meta: Meta<typeof Modal> = {\n  title: 'Design System/Feedback/Modal',\n  component: Modal,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg', 'xl'],\n    },\n    closeOnEsc: {\n      control: 'boolean',\n    },\n    closeOnOverlayClick: {\n      control: 'boolean',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Modal>;\n\n// Interactive example\nconst ModalDemo = (args: Partial<React.ComponentProps<typeof Modal>>) => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        {...args}\n      >\n        <div className=\"space-y-4\">\n          <p>This is the modal content. You can put any React components here.</p>\n          {args.children}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport const Default: Story = {\n  render: (args) => <ModalDemo {...args} />,\n  args: {\n    title: 'Modal Title',\n    size: 'md',\n    closeOnEsc: true,\n    closeOnOverlayClick: true,\n  },\n};\n\nexport const WithFooter: Story = {\n  render: (args) => (\n    <ModalDemo {...args}>\n      <p>This modal has a footer with action buttons.</p>\n      <ModalFooter>\n        <Button variant=\"outline\" onClick={() => {}}>Cancel</Button>\n        <Button onClick={() => {}}>Confirm</Button>\n      </ModalFooter>\n    </ModalDemo>\n  ),\n  args: {\n    title: 'Confirmation',\n    size: 'md',\n  },\n};\n\nexport const LargeModal: Story = {\n  render: (args) => (\n    <ModalDemo {...args}>\n      <div className=\"space-y-4\">\n        <p>This is a larger modal with more content.</p>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pulvinar risus non risus hendrerit venenatis. Pellentesque sit amet hendrerit risus, sed porttitor quam.</p>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pulvinar risus non risus hendrerit venenatis. Pellentesque sit amet hendrerit risus, sed porttitor quam.</p>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pulvinar risus non risus hendrerit venenatis. Pellentesque sit amet hendrerit risus, sed porttitor quam.</p>\n      </div>\n    </ModalDemo>\n  ),\n  args: {\n    title: 'Large Modal',\n    size: 'xl',\n  },\n};\n\nexport const NoTitle: Story = {\n  render: (args) => <ModalDemo {...args} />,\n  args: {\n    size: 'md',\n    children: <p>This modal has no title, just content.</p>,\n  },\n};\n\nexport const Accessibility: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n### Accessibility Considerations\n\n- Uses proper ARIA roles (dialog, modal)\n- Manages focus when opened (traps focus inside modal)\n- Supports keyboard navigation (Tab, Escape)\n- Provides close button with proper labeling\n- Maintains proper contrast for readability\n\n### Keyboard Support\n\n| Key | Function |\n| --- | --- |\n| Tab | Moves focus through interactive elements in the modal |\n| Shift+Tab | Moves focus to the previous interactive element |\n| Escape | Closes the modal (when closeOnEsc is true) |\n        `,\n      },\n    },\n  },\n  render: (args) => (\n    <ModalDemo {...args}>\n      <p>This modal is designed with accessibility in mind.</p>\n      <ModalFooter>\n        <Button variant=\"outline\" onClick={() => {}}>Cancel</Button>\n        <Button onClick={() => {}}>Confirm</Button>\n      </ModalFooter>\n    </ModalDemo>\n  ),\n  args: {\n    title: 'Accessible Modal',\n    size: 'md',\n    closeOnEsc: true,\n    closeOnOverlayClick: true,\n  },\n};"
      },
      {
        "path": "README.md",
        "content": "# Design System\n\nA scalable, reusable design system built with React, TypeScript, TailwindCSS, and Storybook.\n\n## Features\n\n- Typography system with responsive components\n- Data entry components with various states and variants\n- Feedback components with animations and accessibility support\n- Comprehensive Storybook documentation\n- Theming support (light/dark mode)\n- Accessibility compliance\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Development\n\n```bash\n# Run Storybook\nnpm run storybook\n\n# Build Storybook\nnpm run build-storybook\n\n# Start the development server\nnpm start\n```\n\n## Component Categories\n\n### Typography\n\n- Headings (H1-H6)\n- Paragraphs\n- Labels\n- Captions\n- Helper Text\n\n### Data Entry\n\n- Text Input\n- Checkbox\n- Button\n\n### Feedback\n\n- Toast/Snackbar\n- Modal Dialog\n\n## Accessibility\n\nAll components are designed with accessibility in mind:\n\n- ARIA attributes\n- Keyboard navigation\n- Color contrast\n- Screen reader support\n\n## Theming\n\nThe design system supports light and dark modes through a ThemeProvider.\n\n## Documentation\n\nComprehensive documentation is available in Storybook:\n\n- Component descriptions\n- Props/API\n- Use cases\n- States and variants\n- Accessibility notes\n- Best practices\n\n## License\n\nMIT"
      },
      {
        "path": "generate_project.py",
        "content": "#!/usr/bin/env python3\n\nimport os\nimport json\nimport sys\n\ndef create_file(file_path, content):\n    # Create directory if it doesn't exist\n    directory = os.path.dirname(file_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory)\n    \n    # Write content to file\n    with open(file_path, 'w', encoding='utf-8') as f:\n        if isinstance(content, dict):\n            json.dump(content, f, indent=2)\n        else:\n            f.write(content)\n    \n    print(f\"Created: {file_path}\")\n\ndef main():\n    # Load the JSON file\n    try:\n        with open('design-system-files.json', 'r', encoding='utf-8') as f:\n            data = json.load(f)\n    except FileNotFoundError:\n        print(\"Error: design-system-files.json not found.\")\n        return\n    except json.JSONDecodeError:\n        print(\"Error: Invalid JSON in design-system-files.json.\")\n        return\n    \n    # Create files\n    for file_info in data.get('files', []):\n        path = file_info.get('path')\n        content = file_info.get('content')\n        \n        if not path:\n            print(\"Warning: File entry missing path. Skipping.\")\n            continue\n        \n        if content is None:\n            print(f\"Warning: File {path} missing content. Skipping.\")\n            continue\n        \n        create_file(path, content)\n    \n    print(\"\\nProject generation complete!\")\n    print(\"\\nNext steps:\")\n    print(\"1. Run 'npm install' to install dependencies\")\n    print(\"2. Run 'npm run storybook' to start Storybook\")\n    print(\"3. Run 'npm start' to start the development server\")\n\nif __name__ == \"__main__\":\n    main()\n"
      }
]}